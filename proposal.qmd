---
title: "Proposal title"
subtitle: "Proposal"
format: html
editor: visual
---

```{r package installation}
#| message: false
if (!require("pacman")) 
  install.packages("pacman")

# use this line for installing/loading
pacman::p_load(devtools) 

pacman::p_load(tidyverse,
           openintro,
           gridextra,
           dsbox,
           gtable,
           ggpubr,
           ggrepel,
           patchwork,
           units,
           lubridate,
           pander,
           gridExtra,
           ggrepel,
           glue,
           here)
```

## Dataset

```{r}
#| label: load-dataset
#| message: false


```

```{r characters table}
#| message: false
#| warning: false

if(!require("readr"))
  install.packages("readr")

if(!require("gt"))
  install.packages("gt")

library(readr)
library(gt)

characters <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-08-16/characters.csv')

myers_briggs <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-08-16/myers_briggs.csv')

psych_stats <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-08-16/psych_stats.csv')


charactersTop <- head(characters)
myers_briggsTop <- head(myers_briggs)
psych_statsTop <- head(psych_stats)



charactersTop %>%gt() %>%
tab_header(title = "Characters Dataframe") %>%
  
tab_style(
  style = list(cell_fill(color = "#b2f7ef"),
  cell_text(weight = "bold")),
locations = cells_body(columns = id)) %>% 
  
tab_style(
  style = cell_text(weight = "bold"),
  locations = cells_column_labels()
)
```

```{r myers-briggs table}

myers_briggsTop %>% gt() %>%
tab_header(title = "Myers-Briggs Dataframe") %>%
tab_style(
  style = list(cell_fill(color = "#b2f7ef"),
  cell_text(weight = "bold")),
locations = cells_body(columns = char_id)) %>% 
  
tab_style(
  style = cell_text(weight = "bold"),
  locations = cells_column_labels()
)
```

```{r psych evaluation table}
psych_statsTop %>% gt() %>%
tab_header(title = "Psych Evaluation Dataframe") %>%
tab_style(
  style = list(cell_fill(color = "#b2f7ef"),
  cell_text(weight = "bold")),
locations = cells_body(columns = char_id)) %>% 
  
tab_style(
  style = cell_text(weight = "bold"),
  locations = cells_column_labels()
)


```

\[Part 1 - Info on dataset\]

\[Part 2 - Why this dataset\]

## Questions

1.  How do Myers-Briggs personality types distribute across different universes, and how does the average match percentage vary within each universe? Additionally, is there any correlation between character notability scores and their Myers-Briggs types within each universe?

2.  What is the frequency distribution of character personality traits across all characters, and how does it correlate with their average rating? Furthermore, do character notability scores vary significantly based on their personality traits?

## Analysis plan

**Question 1:-**

-   **Variables:**

    -   'Myers-Briggs' dataframe:

        -   **`myers_briggs`**: Myers-Briggs Type

        -   **`avg_match_perc`**: Average Match Percentage

    -   'Characters' dataframe:

        -   **`uni_name`**: Universe Name

        -   **`notability`**: Notability Score

-   **Planning:**

    -   Using the common column 'char_id' between 'Myers-Briggs' dataframe and the 'Characters' dataframe, merge both the dataframes to get the 'Myers-Briggs' type and average match percentage for each character and drop all the unnecessary columns.

    -   Group the data by 'uni_name' to analyze the distribution across different universes.

**Question 2:-**

-   **Variables:**

    -   'Psychology Stats' dataframe:

        -   **`personality`**: Character Personality

        -   **`avg_rating`**: Average Rating

    -   'Characters' dataframe:

        -   **`notability`**: Notability Score

-   **Planning:**

    -   Group the data by 'personality' to analyze the frequency distribution of character personality traits.

    -   Merge the 'Psychology Stats' dataframe with the 'Characters' dataframe using the common column 'char_id' to get the average rating for each character.

## References:

1.  Title: Open Psychometrics

    Author: [jonthegeek](https://github.com/jonthegeek "Github")

    Date: 2022-08-16

    Source: tidytuesday

    Link: <https://github.com/rfordatascience/tidytuesday/tree/master/data/2022/2022-08-16>
