---
title: "Proposal title"
subtitle: "Proposal"
format: html
editor: visual
---

```{r package installation}
#| message: false
if (!require("pacman")) 
  install.packages("pacman")

# use this line for installing/loading
pacman::p_load(devtools) 

pacman::p_load(tidyverse,
           openintro,
           gridextra,
           dsbox,
           gtable,
           ggpubr,
           ggrepel,
           patchwork,
           units,
           lubridate,
           pander,
           gridExtra,
           ggrepel,
           glue,
           here)
```

## Dataset

```{r}
#| label: load-dataset
#| message: false


```

```{r characters table}
#| message: false
#| warning: false

if(!require("readr"))
  install.packages("readr")

if(!require("gt"))
  install.packages("gt")

library(readr)
library(gt)

characters <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-08-16/characters.csv')

myers_briggs <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-08-16/myers_briggs.csv')

psych_stats <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-08-16/psych_stats.csv')


charactersTop <- head(characters)
myers_briggsTop <- head(myers_briggs)
psych_statsTop <- head(psych_stats)



charactersTop %>%gt() %>%
tab_header(title = "Characters Dataframe") %>%
  
tab_style(
  style = list(cell_fill(color = "#b2f7ef"),
  cell_text(weight = "bold")),
locations = cells_body(columns = id)) %>% 
  
tab_style(
  style = cell_text(weight = "bold"),
  locations = cells_column_labels()
)
```

```{r myers-briggs table}

myers_briggsTop %>% gt() %>%
tab_header(title = "Myers-Briggs Dataframe") %>%
tab_style(
  style = list(cell_fill(color = "#b2f7ef"),
  cell_text(weight = "bold")),
locations = cells_body(columns = char_id)) %>% 
  
tab_style(
  style = cell_text(weight = "bold"),
  locations = cells_column_labels()
)
```

```{r psych evaluation table}
psych_statsTop %>% gt() %>%
tab_header(title = "Psych Evaluation Dataframe") %>%
tab_style(
  style = list(cell_fill(color = "#b2f7ef"),
  cell_text(weight = "bold")),
locations = cells_body(columns = char_id)) %>% 
  
tab_style(
  style = cell_text(weight = "bold"),
  locations = cells_column_labels()
)


```

## A brief description of the dataset

The complete psychometric dataset is a combination of about 890 characters from 100 different universes across pop culture, media and entertainment. 
\* The dataset “character.csv” consists of all these characters, their name, the universe they are from, their notability score, link to a page that shows the statistics of their personality traits and a link to their picture to identify them by. 
\* The “psych_stats.csv” consist of similar data along with a this-or-that question that users voted for such as messy/neat, anxious/calm etc. and a personality-trait question such as overachiever, motivated, tense active etc. It also included their overall ratings and average ratings given by users. 
\* The “myers_briggs.csv” file consists of the characters- name, their name ID, their universe and universe ID. It also consists of statistical data of the percentage of people that have matched with them as well as their Myers Briggs personality type that they self-identified with.

## Choosing this dataset

We chose this dataset because it would be more interesting to work on and visualize data that we can understand easily, are familiar with and can even relate to some of it. 
\* Also, the topic on which this dataset is based is very engaging and we reckon it would attract more people to be interested in it. 
\* Since quite a number of fictional characters from different universes are used, it expands our dataset and adds more diversity to it, letting us make different types of plots to visualize the characters, their traits and the number of people that identify with them. Moreover, since fictional characters are not bound by real-world constraints, we have more freedom to explore unconventional or extreme personality traits specially (in our case) to use it for data analysis in an engaging and accessible way. 
\* Using data based on fictional characters that represent personality types and personality traits is a unique way to portray what we have learnt about data visualization so far. Fusing our ‘after-study’ forms of entertainment with our academic subjects will make working on this project more interesting.

## Questions

1.  How do Myers-Briggs personality types distribute across different universes, and how does the average match percentage vary within each universe? Additionally, is there any correlation between character notability scores and their Myers-Briggs types within each universe?

2.  What is the frequency distribution of character personality traits across all characters, and how does it correlate with their average rating? Furthermore, do character notability scores vary significantly based on their personality traits?

## Analysis plan

**Question 1:-**

-   **Variables:**

    -   'Myers-Briggs' dataframe:

        -   **`myers_briggs`**: Myers-Briggs Type

        -   **`avg_match_perc`**: Average Match Percentage

    -   'Characters' dataframe:

        -   **`uni_name`**: Universe Name

        -   **`notability`**: Notability Score

-   **Planning:**

    -   Using the common column 'char_id' between 'Myers-Briggs' dataframe and the 'Characters' dataframe, merge both the dataframes to get the 'Myers-Briggs' type and average match percentage for each character and drop all the unnecessary columns.

    -   Group the data by 'uni_name' to analyze the distribution across different universes.

**Question 2:-**

-   **Variables:**

    -   'Psychology Stats' dataframe:

        -   **`personality`**: Character Personality

        -   **`avg_rating`**: Average Rating

    -   'Characters' dataframe:

        -   **`notability`**: Notability Score

-   **Planning:**

    -   Group the data by 'personality' to analyze the frequency distribution of character personality traits.

    -   Merge the 'Psychology Stats' dataframe with the 'Characters' dataframe using the common column 'char_id' to get the average rating for each character.

## References:

1.  Title: Open Psychometrics

    Author: [jonthegeek](https://github.com/jonthegeek "Github")

    Date: 2022-08-16

    Source: tidytuesday

    Link: <https://github.com/rfordatascience/tidytuesday/tree/master/data/2022/2022-08-16>
