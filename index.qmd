---
title: "Project title"
subtitle: "INFO 526 - Project 1"
author: "Team name"
format: html
editor: visual
---

```{r package installation}
#| message: false
if (!require("pacman")) 
  install.packages("pacman")

# use this line for installing/loading
pacman::p_load(devtools) 

pacman::p_load(tidyverse,
           openintro,
           gtable,
           ggrepel,
           patchwork,
           units,
           readr,
           gt,         
           gganimate, 
           gifski,
           png,
           ggplot2)
```

```{r load dataset}

characters <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-08-16/characters.csv')

myers_briggs <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-08-16/myers_briggs.csv')

psych_stats <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-08-16/psych_stats.csv')


```

## Abstract

Add project abstract here.

What is the frequency distribution of character personality traits across all characters, and how does it correlate with their average rating? Furthermore, do character notability scores vary significantly based on their personality traits?

```{r}
#| label: Question-One-A

#plotA <- ggplot(data = myers_briggs) + geom_density(aes( group = uni_name, x = avg_match_perc, ))

#plotA

#unique(myers_briggs$uni_name)

pacman::p_load(viridis, RColorBrewer)
pacman::p_load(magick, nflplotR)





myers_briggs_grouped <- myers_briggs %>%
  group_by(char_name) %>%
    #summarise(max = max(avg_match_perc, na.rm=TRUE))
    slice_max(avg_match_perc)



# introverted versus extroverted; sensing versus intuitive; thinking versus feeling; and perceiving versus judging.

myers_briggs_grouped <- myers_briggs_grouped %>%
  mutate(
    socialisation = case_when(
      substr(myers_briggs, 1, 1) == "E" ~ "Extroverted",
      substr(myers_briggs, 1, 1) == "I" ~ "Introverted"
    ),
    empiricism = case_when(
      substr(myers_briggs, 2, 2) == "N" ~ "Intuitive",
      substr(myers_briggs, 2, 2) == "S" ~ "Sensing"
    )
  )




myers_briggs_linked <- left_join(myers_briggs_grouped, characters, by=c("char_name" = "name", "char_id" = "id", "uni_id" = "uni_id", "uni_name" = "uni_name"))

myers_briggs_linked <- myers_briggs_linked %>%
  arrange(by = uni_name)










myersBriggsUniversePlot1 <- ggplot(myers_briggs_linked[starts_with(LETTERS[1:6], vars=myers_briggs_linked$uni_name),]) + geom_col(aes(x = myers_briggs, y = notability, fill = uni_name), size=.8, position=position_dodge()) + theme(axis.title.y = element_blank(), axis.text = element_text(size=6), panel.grid.minor=element_blank(), title = element_text(size=11), plot.subtitle = element_text(size=10), plot.background = element_rect(color = "white"), legend.text = element_blank(), legend.position = "none", panel.spacing.x = unit(4, "lines"), strip.clip = "off") + scale_y_continuous(breaks = scales::breaks_width(20)) + labs(title="The number of characters that hold the highest correlation to a respective Myers-Briggs Personality Type: ", subtitle="Per universe, from universes titled A - F") + coord_polar() + facet_wrap2(vars(uni_name))


myersBriggsUniversePlot2 <- ggplot(myers_briggs_linked[starts_with(LETTERS[7:13], vars=myers_briggs_linked$uni_name),]) + geom_col(aes(x = myers_briggs, y = notability, fill = uni_name), size=.8, position=position_dodge()) + theme(axis.title.y = element_blank(), axis.text = element_text(size=6), panel.grid.minor=element_blank(), title = element_text(size=11), plot.subtitle = element_text(size=10), plot.background = element_rect(color = "white"), legend.text = element_blank(), legend.position = "none", panel.spacing.x = unit(4, "lines"), strip.clip = "off") + scale_y_continuous(breaks = scales::breaks_width(20)) + labs(title="The number of characters that hold the highest correlation to a respective Myers-Briggs Personality Type: ", subtitle="Per universe, from universes titled G - M") + coord_polar() + facet_wrap2(vars(uni_name))


myersBriggsUniversePlot3 <- ggplot(myers_briggs_linked[starts_with(LETTERS[14:19], vars=myers_briggs_linked$uni_name),]) + geom_col(aes(x = myers_briggs, y = notability, fill = uni_name), size=.8, position=position_dodge()) + theme(axis.title.y = element_blank(), axis.text = element_text(size=6), panel.grid.minor=element_blank(), title = element_text(size=11), plot.subtitle = element_text(size=10), plot.background = element_rect(color = "white"), legend.text = element_blank(), legend.position = "none", panel.spacing.x = unit(4, "lines"), strip.clip = "off") + scale_y_continuous(breaks = scales::breaks_width(20)) + labs(title="The number of characters that hold the highest correlation to a respective Myers-Briggs Personality Type: ", subtitle="Per universe, from universes titled N - S") + coord_polar() + facet_wrap2(vars(uni_name))


myersBriggsUniversePlot4 <- ggplot(myers_briggs_linked[starts_with(LETTERS[20:26], vars=myers_briggs_linked$uni_name),]) + geom_col(aes(x = myers_briggs, y = notability, fill = uni_name), size=.8, position=position_dodge()) + theme(axis.title.y = element_blank(), axis.text = element_text(size=6), panel.grid.minor=element_blank(), title = element_text(size=11), plot.subtitle = element_text(size=10), plot.background = element_rect(color = "white"), legend.text = element_blank(), legend.position = "none", panel.spacing.x = unit(4, "lines"), strip.clip = "off") + scale_y_continuous(breaks = scales::breaks_width(20)) + labs(title="The number of characters that hold the highest correlation to a respective Myers-Briggs Personality Type: ", subtitle="Per universe, from universes titled T - Z") + coord_polar() + facet_wrap2(vars(uni_name))





ggsave("plot.png", myersBriggsUniversePlot1, width = 20, height = 15, units = c("in"))
ggsave("plot2.png", myersBriggsUniversePlot2, width = 20, height = 15, units = c("in"))
ggsave("plo3.png", myersBriggsUniversePlot3, width = 20, height = 15, units = c("in"))
ggsave("plot4.png", myersBriggsUniversePlot4, width = 20, height = 15, units = c("in"))








notabilityScores_TheWalkingDead <- ggplot(myers_briggs_linked[myers_briggs_linked$uni_name %in% c("The Walking Dead"),], aes()) + geom_jitter(aes(x = myers_briggs, y = notability, pch=socialisation), position = position_jitter(seed=3))  + theme( axis.text = element_text(size=6), panel.grid.minor.y=element_blank(), title = element_text(size=11), plot.subtitle = element_text(size=10), axis.text.x = element_text(), panel.grid.major.x = element_blank(), legend.position = "none") + scale_y_continuous(breaks = scales::breaks_width(10)) + labs(title="Sums of the number of characters that are predominantly of a chosen Personality Type: ", subtitle="From the Game of Thrones Universe, with percentage match to said personality type highlighted", x = "Myers Briggs Personality Type", y = "Notability Score") + geom_text( aes( label=paste("n=",avg_match_perc), x = myers_briggs, y = notability), size=1.3, vjust=-1, position = position_jitter(seed=3)) +geom_vline(xintercept=seq(0.5,after_stat(nrow(myers_briggs)),1),color="#FFAAFF", alpha = .5)


notabilityScores_TheWalkingDead


notabilityMeans_TheWalkingDead <- ggplot(filter(myers_briggs_linked, uni_name == "The Walking Dead"), aes(group = myers_briggs, x = myers_briggs)) + geom_bar(aes( y = notability, fill = myers_briggs), width=.4, stat="summary", fun="mean") + theme(  panel.grid.minor.y=element_blank(), title = element_text(size=11), plot.subtitle = element_text(size=10), axis.text = element_text(size=6), panel.grid.major.x = element_blank(), legend.position = "none") + scale_y_continuous(breaks = scales::breaks_width(10), expand = expand_scale(c(0,0), c(0,20))) + labs(title="Sums of the number of characters that are predominantly of a chosen Personality Type: ", subtitle="From The Walking Dead Universe, with percentage match to said personality type highlighted", x = "Myers Briggs Personality Type", y = "Notability Score") +geom_vline(xintercept=seq(0.5,after_stat(nrow(myers_briggs)),1),color="#FFAAFF", alpha = .5) + stat_summary(geom="text", fun = "mean", aes(label=floor(after_stat(y)), x = myers_briggs, y = notability), size = 2, vjust= -2) + geom_from_path(aes(x = myers_briggs, y=95, path = image_link, group=myers_briggs), width = .2, height = .2) 

notabilityMeans_TheWalkingDead

 




notabilityScores_GameOfThrones <- ggplot(myers_briggs_linked[myers_briggs_linked$uni_name %in% c("Game of Thrones"),], aes()) + geom_jitter(aes(x = myers_briggs, y = notability, pch=socialisation), position = position_jitter(seed=3))  + theme( axis.text = element_text(size=6), panel.grid.minor.y=element_blank(), title = element_text(size=11), plot.subtitle = element_text(size=10), axis.text.x = element_text(), panel.grid.major.x = element_blank(), legend.position = "none") + scale_y_continuous(breaks = scales::breaks_width(10)) + labs(title="Sums of the number of characters that are predominantly of a chosen Personality Type: ", subtitle="From the Game of Thrones Universe, with percentage match to said personality type highlighted", x = "Myers Briggs Personality Type", y = "Notability Score") + geom_text( aes( label=paste("n=",avg_match_perc), x = myers_briggs, y = notability), size=1.3, vjust=-1, position = position_jitter(seed=3)) +geom_vline(xintercept=seq(0.5,after_stat(nrow(myers_briggs)),1),color="#FFAAFF", alpha = .5)


notabilityScores_GameOfThrones




notabilityMeans_GameOfThrones<- ggplot(filter(myers_briggs_linked, uni_name == "Game of Thrones"), aes(group = myers_briggs, x = myers_briggs)) + geom_bar(aes( y = notability, fill = myers_briggs), width=.4, stat="summary", fun="mean") + theme(  panel.grid.minor.y=element_blank(), title = element_text(size=11), plot.subtitle = element_text(size=10), axis.text = element_text(size=6), panel.grid.major.x = element_blank(), legend.position = "none") + scale_y_continuous(breaks = scales::breaks_width(10), expand = expand_scale(c(0,0), c(0,20))) + labs(title="Sums of the number of characters that are predominantly of a chosen Personality Type: ", subtitle="From the Game of Thrones Universe, with percentage match to said personality type highlighted", x = "Myers Briggs Personality Type", y = "Notability Score") +geom_vline(xintercept=seq(0.5,after_stat(nrow(myers_briggs)),1),color="#FFAAFF", alpha = .5) + stat_summary(geom="text", fun = "mean", aes(label=floor(after_stat(y)), x = myers_briggs, y = notability), size = 2, vjust= -2) + geom_from_path(aes(x = myers_briggs, y=95, path = image_link, group=myers_briggs), width = .2, height = .2) 


notabilityMeans_GameOfThrones







myers_briggs_mean_notability <- myers_briggs_linked %>%
 group_by(uni_name, myers_briggs) %>%
  summarise(
      mean = mean(notability),
      socialisation = socialisation,
      empiricism = empiricism
  ) %>%
  filter(mean == max(mean))



#g11 <- ggplot(myers_briggs_mean_notability) + geom_bar(aes(x = myers_briggs, fill = myers_briggs)) + theme(  panel.grid.minor.y=element_blank(), title = element_text(size=11), plot.subtitle = element_text(size=10), axis.text = element_text(size=6), panel.grid.major.x = element_blank(), legend.position = "none") + scale_y_continuous(breaks = scales::breaks_width(2), expand = expand_scale(c(0,0), c(0,4))) + labs(title="Count of the myers-briggs type correlated to the highest mean notability scores", subtitle="From every universe", x = "Myers Briggs Personality Type", y = "Count") + geom_text( aes( label=after_stat(count), x = myers_briggs, y = after_stat(count)), vjust=-1, size = 3, stat="count")
#g11


myers_briggs_mean_notability <- myers_briggs_mean_notability %>%
  mutate(Network = case_when(
    uni_name %in% c("Game of Thrones", "True Detective", "Euphoria", "The Sopranos", "Westworld", "The Wire", "Watchmen", "Succession", "Silicon Valley") ~ "HBO",
    uni_name %in% c("Breaking Bad", "Better Call Saul", "Mad Men", "The Walking Dead", "") ~ "AMC",
    TRUE ~ "Other"
  ))



myers_briggs_grouped_notability <- myers_briggs_linked %>%
 group_by(uni_name, myers_briggs) %>%
  summarise(
      notability = (notability),
      socialisation = socialisation,
      empiricism = empiricism
  )

myers_briggs_grouped_notability <- myers_briggs_grouped_notability %>%
  mutate(Network = case_when(
    uni_name %in% c("Game of Thrones", "True Detective", "Euphoria", "The Sopranos", "Westworld", "The Wire", "Watchmen", "Succession", "Silicon Valley") ~ "HBO",
    uni_name %in% c("Breaking Bad", "Better Call Saul", "Mad Men", "The Walking Dead") ~ "AMC",
    TRUE ~ "Other"
  ))



g12 <- ggplot(myers_briggs_grouped_notability) + geom_bar(aes(x = myers_briggs, fill = Network, y = notability), stat="summary", fun = "mean", position = position_dodge(.9), width = .5) + theme(  panel.grid.minor.y=element_blank(), title = element_text(size=11), plot.subtitle = element_text(size=10), axis.text = element_text(size=6), panel.grid.major.x = element_blank()) + scale_y_continuous(breaks = scales::breaks_width(10), expand = expand_scale(c(0,0), c(0,4))) + labs(title="Count of the myers-briggs type correlated to the highest mean notability scores", subtitle="From every universe", x = "Myers Briggs Personality Type", y = "Mean notability") + facet_wrap2(vars(socialisation), scales = "free_x") + scale_fill_brewer(palette = "YlOrRd") + scale_x_discrete(expand=(c(.1,.1))) + geom_vline(xintercept=seq(0.5,after_stat(nrow(myers_briggs)),1),color="#FFAAFF", alpha = .5)
g12


```

```{r}
categorize_personality <- function(personality_trait) {
  # Convert personality trait to lowercase
  personality_trait <- tolower(personality_trait)
  
  # Define categories and corresponding personality traits
  categories <- c(
    "Social Traits",
    "Emotional Traits",
    "Intellectual Traits",
    "Assertive Traits",
    "Adventurous Traits",
    "Balanced Traits",
    "Other Traits"
  )
  category_map <- list(
    "Social Traits" = c(
      "friendly", "sociable", "warm-hearted", "kind", "sympathetic", 
      "compassionate", "understanding", "tolerant", "patient", "generous", 
      "helpful", "considerate", "cooperative", "empathetic", "supportive", 
      "cheerful", "humorous", "optimistic", "enthusiastic", "affectionate"
    ),
    "Emotional Traits" = c(
      "calm", "confident", "self-confident", "self-disciplined", "patient", 
      "perceptive", "sensitive", "thoughtful", "insightful", "intuitive", 
      "open-minded", "honest", "trustworthy", "dependable", "reliable", 
      "responsible", "mature", "modest", "humble", "sincere"
    ),
    "Intellectual Traits" = c(
      "analytical", "creative", "innovative", "intelligent", "curious", 
      "imaginative", "logical", "rational", "thoughtful", "knowledgeable", 
      "insightful", "wise", "intellectual", "independent", "introspective", 
      "methodical", "organized", "practical", "resourceful"
    ),
    "Assertive Traits" = c(
      "assertive", "determined", "ambitious", "tenacious", "resilient", 
      "goal-oriented", "driven", "confident", "courageous"
    ),
    "Adventurous Traits" = c(
      "adventurous", "daring", "bold", "risk-taker", "spontaneous", "energetic"
    ),
    "Balanced Traits" = c(
      "balanced", "flexible", "adaptable", "versatile", "well-rounded"
    ),
    "Other Traits" = c(
      "eccentric", "quirky", "unique", "eccentric", "unconventional", "nonconformist"
    )
  )
  
  # Find the category for the given personality trait
  for (category in categories) {
    if (personality_trait %in% category_map[[category]]) {
      return(category)
    }
  }
  
  return("Unknown")  # Return "Unknown" if the personality trait doesn't match any category
}
```

```{r question 2}

# characters
# psych_stats


characters$char_id = characters$id

psych_stats$personality_category <- sapply(psych_stats$personality, categorize_personality)

personalityDistribution <- psych_stats |>
  count(personality_category)

personalityDistribution = subset(personalityDistribution, personality_category != "Unknown")

charactersFiltered = characters |>
  select(char_id, notability)

psychStatsFiltered = psych_stats |>
  select(char_id, personality_category, avg_rating)

psychStatsCharacters = merge(charactersFiltered, psychStatsFiltered, by = "char_id")

psychStatsCharactersSubset = subset(psychStatsCharacters, personality_category != "Unknown")

avgRating = psychStatsCharacters |>
  group_by(personality_category) |>
  summarise(avg_rating = mean(avg_rating))

avgNotability = psychStatsCharacters |>
  group_by(personality_category) |>
  summarise(avg_notability = mean(notability))


psychStatsCharactersMerged = merge(personalityDistribution, 
                                   avgRating, 
                                   by = "personality_category")

psychStatsCharactersMerged = merge(psychStatsCharactersMerged,
                                   avgNotability,
                                   by = "personality_category")

pacman::p_load(RColorBrewer)


ggplot(personalityDistribution, aes(x = reorder(personality_category, -n), 
                                    y = n)) +
  geom_bar(stat = "identity", aes(fill=reorder(personality_category, -n)), color = "black") + scale_fill_brewer(palette = "Reds") + labs(title = "Frequency Distribution of Character Personality Traits",
       x = "Personality Traits",
       y = "Frequency")  +
  coord_flip() +
  theme_minimal()+
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        plot.title = element_text(hjust = 0.5), legend.position = "none")


ggplot(avgRating, aes(x = reorder(personality_category, -avg_rating), y = avg_rating)) +
  geom_bar(stat = "identity", aes(fill=reorder(personality_category, -avg_rating)), color = "black") +
  labs(title = "Average Rating by Character Personality Traits",
       x = "Personality Traits",
       y = "Average Rating")  +
  coord_flip() +
  theme_minimal() + scale_fill_brewer(palette = "YlOrBr")+
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        plot.title = element_text(hjust = 0.5), legend.position = "none")


ggplot(avgNotability, aes(x = reorder(personality_category, -avg_notability), y = avg_notability)) +
  geom_bar(stat = "identity", aes(fill=reorder(personality_category, -avg_notability)), color = "black") +
  labs(title = "Average Notability by Character Personality Traits",
       x = "Personality Traits",
       y = "Average Notability")  +
  coord_flip() +
  theme_minimal() + scale_fill_brewer(palette = "Purples")+
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        plot.title = element_text(hjust = 0.5), legend.position = "none")

ggplot(psychStatsCharactersSubset, aes(x = avg_rating)) +
  geom_density() +
  facet_wrap(~personality_category, dir = "v") +
  theme_minimal() + scale_fill_brewer(palette = "Greens")

```
